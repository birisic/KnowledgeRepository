[
    {
        "id": 1,
        "name": "School Workspace (right click me)",
        "type": "Workspace",
        "ownerId": 1,
        "parentId": null
    },
    {
        "id": 2,
        "name": "Currently Studying",
        "type": "Directory",
        "ownerId": 1,
        "parentId": 1
    },
    {
        "id": 3,
        "name": "Frontend",
        "type": "Directory",
        "ownerId": 1,
        "parentId": 2
    },
    {
        "id": 4,
        "name": "Backend",
        "type": "Directory",
        "ownerId": 1,
        "parentId": 2
    },
    {
        "id": 5,
        "name": "TypeScript",
        "type": "Document",
        "ownerId": 1,
        "parentId": 3,
        "contents": "<ul><li><p><strong>Strongly Typed</strong> üîí: TypeScript is a statically typed superset of JavaScript, providing optional types.</p><p>typescript</p><p>&nbsp;</p><p>Copy code</p><p>let isDone: boolean = false;</p></li><li><p><strong>Interfaces</strong> üìú: Define complex types and enforce structure in objects.</p><p>typescript</p><p>&nbsp;</p><p>Copy code</p><p>interface Person { &nbsp;firstName: string; &nbsp;lastName: string;}</p></li><li><p><strong>Classes</strong> üèóÔ∏è: Create custom types with properties and methods.</p><p>typescript</p><p>&nbsp;</p><p>Copy code</p><p>class Animal { &nbsp;name: string; &nbsp;constructor(name: string) { this.name = name; } &nbsp;makeSound() { console.log('Some sound'); }}</p></li><li><p><strong>Generics</strong> üß±: Allows writing reusable and flexible code.</p><p>typescript</p><p>&nbsp;</p><p>Copy code</p><p>function identity&lt;T&gt;(arg: T): T { return arg; }</p></li><li><p><strong>Type Inference</strong> ÔøΩÔøΩeducated: TypeScript can infer the type based on the value.</p><p>typescript</p><p>&nbsp;</p><p>Copy code</p><p>let message = 'Hello World'; // message is of type string</p></li></ul>"
    },
    {
        "id": 6,
        "name": "Angular",
        "type": "Document",
        "ownerId": 1,
        "parentId": 3,
        "contents": "<ul><li><strong>Component-Based Architecture</strong>: Angular uses a component-based structure, which enhances reusability and modularity.</li><li><strong>Two-Way Data Binding</strong>: Angular synchronizes the model and the view. This means that any change in the model updates the view and vice versa.</li><li><strong>Directives</strong>: Angular allows you to create custom HTML tags that serve as new, custom widgets. It also includes built-in directives.</li><li><strong>Dependency Injection</strong>: Angular has built-in dependency injection which makes the application easier to develop, understand, and test.</li><li><strong>TypeScript</strong>: Angular is built with TypeScript, a statically typed superset of JavaScript, which leads to more robust code.</li><li><strong>Angular CLI</strong>: The Angular CLI is a command-line interface that can create a new Angular application, add features to an existing application, and perform a variety of other tasks.</li></ul>"
    },
    {
        "id": 7,
        "name": "ASP.NET",
        "type": "Document",
        "ownerId": 1,
        "parentId": 4,
        "contents": "<p><strong>ASP.NET</strong>: This is a <i>open-source</i> framework developed by Microsoft. It's used to create <i>dynamic</i> web pages. It's a part of the .NET platform and provides a robust set of tools and libraries.</p><p><strong>Model-View-Controller (MVC) Architecture</strong>: ASP.NET uses this architecture, which separates the application's concerns, making it easier to manage and maintain.</p><ul><li><strong>Model</strong>: This represents the data and business logic of your application.</li><li><strong>View</strong>: This is the user interface of your application.</li><li><strong>Controller</strong>: This handles the user's input and updates the model and view accordingly.</li></ul><p>** Razor Syntax**: ASP.NET uses this syntax for building views. It's a <i>clean</i> and <i>intuitive</i> way to embed server-side code in your HTML.</p><p><strong>Strong Typing</strong>: ASP.NET supports strong typing, which helps in catching errors at compile-time and makes your code more reliable.</p><p><strong>Extensibility</strong>: ASP.NET is highly extensible. You can add new functionalities using packages from NuGet, Microsoft's package manager.</p>"
    },
    {
        "id": 8,
        "name": "PHP Symfony",
        "type": "Document",
        "ownerId": 1,
        "parentId": 4,
        "contents": "<h3>üöÄ <strong>What is Symfony?</strong></h3><p>Symfony is a <strong>high-performance</strong> PHP framework built for <strong>web applications</strong>. It emphasizes <strong>reusability</strong> and <strong>maintainability</strong>, making it a top choice for enterprise-level projects.</p><h3>‚ú® <strong>Key Features of Symfony</strong></h3><ul><li><strong>Bundles</strong>: Modular components that provide reusable code across different projects.</li><li><strong>Services and Dependency Injection</strong>: The heart of Symfony, providing easy-to-manage service containers.</li><li><strong>Routing</strong>: Flexible and robust URL routing for both small and complex applications.</li><li><strong>Twig Templating Engine</strong>: A fast, secure, and flexible templating system for your views.</li><li><strong>Doctrine ORM</strong>: A powerful Object-Relational Mapping (ORM) library for database interactions.</li></ul><h3>üß© <strong>Bundles</strong> ‚Äî Modularity at its Best</h3><ul><li><strong>Bundles</strong> are like plugins that contain their own configuration, code, and assets.</li><li>You can easily <strong>add or remove</strong> bundles without affecting the rest of the application.</li><li>Popular Symfony bundles include:<ul><li><strong>SecurityBundle</strong>: Handles authentication &amp; authorization.</li><li><strong>MonologBundle</strong>: For logging.</li><li><strong>FOSUserBundle</strong>: Provides advanced user management.</li></ul></li></ul><h3>üõ† <strong>Dependency Injection (DI)</strong> ‚Äî Control &amp; Flexibility</h3><ul><li><strong>Everything in Symfony is a service!</strong> You define services, and Symfony injects them where needed.</li><li><strong>Service Container</strong>: Holds the registered services and manages their lifecycle.</li><li><strong>Configuration flexibility</strong>:<ul><li><strong>YAML</strong>, <strong>XML</strong>, or <strong>PHP</strong> format.</li><li>config/services.yaml is the go-to place for service definitions.</li></ul></li><li>Simplifies <strong>testing</strong> by allowing easy mocking of services.</li></ul><h3>üåç <strong>Routing</strong> ‚Äî Powerful URL Management</h3><ul><li><strong>Annotations</strong> or <strong>YAML</strong> for defining routes.</li><li>Supports <strong>dynamic parameters</strong>, <strong>optional parameters</strong>, and even <strong>wildcards</strong>.</li><li><p>Example annotation-based route:</p><p>php</p><p>Copy code</p><p>/** * @Route('/blog/{slug}', name='blog_show') */public function show($slug){ &nbsp; &nbsp;// ...}</p></li><li>Can handle <strong>RESTful APIs</strong> easily.</li></ul><h3>üîå <strong>Twig</strong> ‚Äî Secure &amp; Beautiful Templating</h3><ul><li>Twig makes your views <strong>cleaner</strong> and <strong>more readable</strong>.</li><li>Offers a wide range of <strong>filters</strong> and <strong>tags</strong> for rendering data safely.</li><li><strong>Inheritance</strong> support (layout templates!).</li><li><p>Example:</p><p>twig</p><p>Copy code</p><p>{% extends 'base.html.twig' %}{% block title %}Welcome to My Blog{% endblock %}{% block body %} &nbsp;&lt;h1&gt;{{ post.title }}&lt;/h1&gt; &nbsp;&lt;p&gt;{{ post.content }}&lt;/p&gt;{% endblock %}</p></li></ul><h3>üóÑ <strong>Doctrine ORM</strong> ‚Äî Seamless Database Interactions</h3><ul><li>Doctrine is the <strong>default ORM</strong> in Symfony.</li><li>Maps PHP objects to database tables, simplifying database queries.</li><li>Supports:<ul><li><strong>Lazy loading</strong>.</li><li><strong>Transactions</strong>.</li><li><strong>Migrations</strong>.</li></ul></li><li><p>Example Entity:</p><p>php</p><p>Copy code</p><p>/** * @ORMEntity(repositoryClass=BlogPostRepository::class) */class BlogPost{ &nbsp; &nbsp;/** &nbsp; &nbsp; * @ORMId &nbsp; &nbsp; * @ORMGeneratedValue &nbsp; &nbsp; * @ORMColumn(type='integer') &nbsp; &nbsp; */ &nbsp; &nbsp;private $id; &nbsp; &nbsp;/** @ORMColumn(type='string', length=255) */ &nbsp; &nbsp;private $title; &nbsp; &nbsp;/** @ORMColumn(type='text') */ &nbsp; &nbsp;private $content;}</p></li></ul><h3>üîí <strong>Security Component</strong> ‚Äî Authentication &amp; Authorization</h3><ul><li>Manage <strong>roles</strong>, <strong>permissions</strong>, and <strong>firewalls</strong> with ease.</li><li>Built-in support for:<ul><li><strong>OAuth2</strong>.</li><li><strong>JWT Authentication</strong>.</li><li><strong>LDAP</strong> and <strong>OAuth Providers</strong>.</li></ul></li><li><p>Example configuration (security.yaml):</p><p>yaml</p><p>Copy code</p><p>security: &nbsp;encoders: &nbsp; &nbsp;AppEntityUser: &nbsp; &nbsp; &nbsp;algorithm: bcrypt &nbsp;firewalls: &nbsp; &nbsp;secured_area: &nbsp; &nbsp; &nbsp;pattern: ^/admin &nbsp; &nbsp; &nbsp;http_basic: ~</p></li></ul><h3>üß™ <strong>Testing</strong> ‚Äî Built for Quality Assurance</h3><ul><li>Symfony makes testing seamless with <strong>PHPUnit</strong> integration.</li><li>Provides <strong>BrowserKit</strong> and <strong>Panther</strong> for functional and end-to-end testing.</li><li><p>Example functional test:</p><p>php</p><p>Copy code</p><p>public function testPageIsSuccessful(){ &nbsp; &nbsp;$client = static::createClient(); &nbsp; &nbsp;$client-&gt;request('GET', '/'); &nbsp; &nbsp;$this-&gt;assertResponseIsSuccessful(); &nbsp; &nbsp;$this-&gt;assertSelectorTextContains('h1', 'Welcome');}</p></li></ul><h3>üì¶ <strong>Environment &amp; Configurations</strong> ‚Äî Adaptability at its Core</h3><ul><li>Symfony uses <strong>.env files</strong> to manage configuration for different environments (development, production).</li><li><strong>Profiles</strong> for easy configuration switching:<ul><li>dev</li><li>prod</li><li>test</li></ul></li><li>Leverage <strong>caching</strong> and <strong>debugging tools</strong> like the <strong>Profiler</strong> for in-depth performance analysis.</li></ul><h3>üö¶ <strong>CLI Tools</strong> ‚Äî Powerful and Productive</h3><ul><li><strong>Symfony Console</strong>: A robust command-line tool to help manage your application.</li><li><p>Some useful commands:</p><p>bash</p><p>Copy code</p><p>symfony console make:controllersymfony console doctrine:migrations:migratesymfony console debug:router</p></li></ul><h3>ü§ù <strong>Flexibility &amp; Reusability</strong></h3><ul><li>Symfony is designed to work well in both <strong>monolithic</strong> and <strong>microservice</strong> architectures.</li><li>Can be used <strong>standalone</strong> or as part of another framework (such as <strong>Laravel</strong> components).</li></ul><h3>üí° <strong>Best Practices &amp; Standards</strong></h3><ul><li>Follows <strong>PSR</strong> standards (PSR-4 for autoloading, PSR-7 for HTTP requests).</li><li>Encourages <strong>SOLID</strong> principles and <strong>separation of concerns</strong>.</li><li>Symfony offers a well-structured <strong>best practices</strong> guide, ensuring you always code the right way.</li></ul>"
    }
]
